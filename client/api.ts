/* tslint:disable */
/* eslint-disable */
/**
 * captcha-for-all-api
 * Brings captcha to everywhere
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Challenge
 */
export interface Challenge {
    /**
     * 
     * @type {string}
     * @memberof Challenge
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Challenge
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof Challenge
     */
    'state': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Challenge
     */
    'errors': Array<ChallengeErrorsEnum>;
}

export const ChallengeErrorsEnum = {
    MissingInputSecret: 'missing-input-secret',
    InvalidInputSecret: 'invalid-input-secret',
    MissingInputResponse: 'missing-input-response',
    InvalidInputResponse: 'invalid-input-response',
    BadRequest: 'bad-request',
    InvalidOrAlreadySeenResponse: 'invalid-or-already-seen-response',
    NotUsingDummyPasscode: 'not-using-dummy-passcode',
    SitekeySecretMismatch: 'sitekey-secret-mismatch'
} as const;

export type ChallengeErrorsEnum = typeof ChallengeErrorsEnum[keyof typeof ChallengeErrorsEnum];

/**
 * Validation failed
 * @export
 * @interface ChallengeControllerGetChallengeByToken400Response
 */
export interface ChallengeControllerGetChallengeByToken400Response {
    /**
     * 
     * @type {number}
     * @memberof ChallengeControllerGetChallengeByToken400Response
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof ChallengeControllerGetChallengeByToken400Response
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof ChallengeControllerGetChallengeByToken400Response
     */
    'error'?: string;
}
/**
 * Challenge was not found
 * @export
 * @interface ChallengeControllerGetChallengeByToken404Response
 */
export interface ChallengeControllerGetChallengeByToken404Response {
    /**
     * 
     * @type {number}
     * @memberof ChallengeControllerGetChallengeByToken404Response
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof ChallengeControllerGetChallengeByToken404Response
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ChallengeControllerGetChallengeByToken404Response
     */
    'error'?: string;
}
/**
 * Challenge was already verified
 * @export
 * @interface ChallengeControllerPatchVerifyChallenge422Response
 */
export interface ChallengeControllerPatchVerifyChallenge422Response {
    /**
     * 
     * @type {number}
     * @memberof ChallengeControllerPatchVerifyChallenge422Response
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof ChallengeControllerPatchVerifyChallenge422Response
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ChallengeControllerPatchVerifyChallenge422Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface ChallengeControllerPostNewChallenge500Response
 */
export interface ChallengeControllerPostNewChallenge500Response {
    /**
     * 
     * @type {number}
     * @memberof ChallengeControllerPostNewChallenge500Response
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof ChallengeControllerPostNewChallenge500Response
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ChallengeControllerPostNewChallenge500Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface VerifyChallengeRequestDto
 */
export interface VerifyChallengeRequestDto {
    /**
     * 
     * @type {string}
     * @memberof VerifyChallengeRequestDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof VerifyChallengeRequestDto
     */
    'response': string;
}

/**
 * ChallengeApi - axios parameter creator
 * @export
 */
export const ChallengeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets a challenge by its token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerGetChallengeByToken: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('challengeControllerGetChallengeByToken', 'token', token)
            const localVarPath = `/challenge/token/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verifies a response and solves the challenge
         * @param {VerifyChallengeRequestDto} verifyChallengeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerPatchVerifyChallenge: async (verifyChallengeRequestDto: VerifyChallengeRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyChallengeRequestDto' is not null or undefined
            assertParamExists('challengeControllerPatchVerifyChallenge', 'verifyChallengeRequestDto', verifyChallengeRequestDto)
            const localVarPath = `/challenge/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyChallengeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerPostNewChallenge: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/challenge/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChallengeApi - functional programming interface
 * @export
 */
export const ChallengeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChallengeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets a challenge by its token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async challengeControllerGetChallengeByToken(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Challenge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.challengeControllerGetChallengeByToken(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verifies a response and solves the challenge
         * @param {VerifyChallengeRequestDto} verifyChallengeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async challengeControllerPatchVerifyChallenge(verifyChallengeRequestDto: VerifyChallengeRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.challengeControllerPatchVerifyChallenge(verifyChallengeRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async challengeControllerPostNewChallenge(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Challenge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.challengeControllerPostNewChallenge(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChallengeApi - factory interface
 * @export
 */
export const ChallengeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChallengeApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets a challenge by its token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerGetChallengeByToken(token: string, options?: any): AxiosPromise<Challenge> {
            return localVarFp.challengeControllerGetChallengeByToken(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verifies a response and solves the challenge
         * @param {VerifyChallengeRequestDto} verifyChallengeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerPatchVerifyChallenge(verifyChallengeRequestDto: VerifyChallengeRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.challengeControllerPatchVerifyChallenge(verifyChallengeRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerPostNewChallenge(options?: any): AxiosPromise<Challenge> {
            return localVarFp.challengeControllerPostNewChallenge(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChallengeApi - object-oriented interface
 * @export
 * @class ChallengeApi
 * @extends {BaseAPI}
 */
export class ChallengeApi extends BaseAPI {
    /**
     * 
     * @summary Gets a challenge by its token
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChallengeApi
     */
    public challengeControllerGetChallengeByToken(token: string, options?: AxiosRequestConfig) {
        return ChallengeApiFp(this.configuration).challengeControllerGetChallengeByToken(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verifies a response and solves the challenge
     * @param {VerifyChallengeRequestDto} verifyChallengeRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChallengeApi
     */
    public challengeControllerPatchVerifyChallenge(verifyChallengeRequestDto: VerifyChallengeRequestDto, options?: AxiosRequestConfig) {
        return ChallengeApiFp(this.configuration).challengeControllerPatchVerifyChallenge(verifyChallengeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new challenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChallengeApi
     */
    public challengeControllerPostNewChallenge(options?: AxiosRequestConfig) {
        return ChallengeApiFp(this.configuration).challengeControllerPostNewChallenge(options).then((request) => request(this.axios, this.basePath));
    }
}


